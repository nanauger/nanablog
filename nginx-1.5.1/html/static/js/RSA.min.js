// RSA, a suite of routines for performing RSA public-key computations in
// JavaScript.
function RSAKeyPair(a,g,d){this.e=biFromHex(a);this.d=biFromHex(g);this.m=biFromHex(d);this.chunkSize=2*biHighIndex(this.m);this.radix=16;this.barrett=new BarrettMu(this.m)}function twoDigit(a){return(10>a?"0":"")+String(a)}function encryptedString(a,g){for(var d=[],e=g.length,b=0;b<e;)d[b]=g.charCodeAt(b),b++;for(;0!=d.length%a.chunkSize;)d[b++]=0;for(var e=d.length,f="",c,k,h,b=0;b<e;b+=a.chunkSize){h=new BigInt;c=0;for(k=b;k<b+a.chunkSize;++c)h.digits[c]=d[k++],h.digits[c]+=d[k++]<<8;c=a.barrett.powMod(h,a.e);c=16==a.radix?biToHex(c):biToString(c,a.radix);f+=c+" "}return f.substring(0,f.length-1)}function decryptedString(a,g){var d=g.split(" "),e="",b,f,c;for(b=0;b<d.length;++b)for(f=16==a.radix?biFromHex(d[b]):biFromString(d[b],a.radix),c=a.barrett.powMod(f,a.d),f=0;f<=biHighIndex(c);++f)e+=String.fromCharCode(c.digits[f]&255,c.digits[f]>>8);0==e.charCodeAt(e.length-1)&&(e=e.substring(0,e.length-1));return e};